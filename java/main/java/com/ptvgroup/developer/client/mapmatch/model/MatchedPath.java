/*
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.mapmatch.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Detailed information about a continuous part of a matched track.
 */
@ApiModel(description = "Detailed information about a continuous part of a matched track.")
@JsonPropertyOrder({
  MatchedPath.JSON_PROPERTY_DISTANCE,
  MatchedPath.JSON_PROPERTY_START_TRACK_POSITION_INDEX,
  MatchedPath.JSON_PROPERTY_END_TRACK_POSITION_INDEX,
  MatchedPath.JSON_PROPERTY_ROUTE_ID
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-01T08:33:58.138310Z[Etc/UTC]")
public class MatchedPath {
  public static final String JSON_PROPERTY_DISTANCE = "distance";
  private Integer distance;

  public static final String JSON_PROPERTY_START_TRACK_POSITION_INDEX = "startTrackPositionIndex";
  private Integer startTrackPositionIndex;

  public static final String JSON_PROPERTY_END_TRACK_POSITION_INDEX = "endTrackPositionIndex";
  private Integer endTrackPositionIndex;

  public static final String JSON_PROPERTY_ROUTE_ID = "routeId";
  private UUID routeId;

  public MatchedPath() { 
  }

  public MatchedPath distance(Integer distance) {
    this.distance = distance;
    return this;
  }

   /**
   * The distance [m] of the complete matched path.
   * minimum: 0
   * @return distance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The distance [m] of the complete matched path.")
  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDistance() {
    return distance;
  }


  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public MatchedPath startTrackPositionIndex(Integer startTrackPositionIndex) {
    this.startTrackPositionIndex = startTrackPositionIndex;
    return this;
  }

   /**
   * The index in the list of trackPositions of the start position of this path. It is available only if the list of trackPositions is requested by MatchedTrackResults.TRACK_POSITIONS.
   * minimum: 0
   * @return startTrackPositionIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The index in the list of trackPositions of the start position of this path. It is available only if the list of trackPositions is requested by MatchedTrackResults.TRACK_POSITIONS.")
  @JsonProperty(JSON_PROPERTY_START_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStartTrackPositionIndex() {
    return startTrackPositionIndex;
  }


  @JsonProperty(JSON_PROPERTY_START_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartTrackPositionIndex(Integer startTrackPositionIndex) {
    this.startTrackPositionIndex = startTrackPositionIndex;
  }


  public MatchedPath endTrackPositionIndex(Integer endTrackPositionIndex) {
    this.endTrackPositionIndex = endTrackPositionIndex;
    return this;
  }

   /**
   * The index in the list of trackPositions of the end position of this path. It is available only if the list of trackPositions is requested by MatchedTrackResults.TRACK_POSITIONS.
   * minimum: 0
   * @return endTrackPositionIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The index in the list of trackPositions of the end position of this path. It is available only if the list of trackPositions is requested by MatchedTrackResults.TRACK_POSITIONS.")
  @JsonProperty(JSON_PROPERTY_END_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEndTrackPositionIndex() {
    return endTrackPositionIndex;
  }


  @JsonProperty(JSON_PROPERTY_END_TRACK_POSITION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTrackPositionIndex(Integer endTrackPositionIndex) {
    this.endTrackPositionIndex = endTrackPositionIndex;
  }


  public MatchedPath routeId(UUID routeId) {
    this.routeId = routeId;
    return this;
  }

   /**
   * The ID of the route for this path. It is available only if it is requested by MatchedTrackResults.ROUTE_ID. This route ID can be used as an input paramater in a calculateRoute request at the Routing API.
   * @return routeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the route for this path. It is available only if it is requested by MatchedTrackResults.ROUTE_ID. This route ID can be used as an input paramater in a calculateRoute request at the Routing API.")
  @JsonProperty(JSON_PROPERTY_ROUTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getRouteId() {
    return routeId;
  }


  @JsonProperty(JSON_PROPERTY_ROUTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRouteId(UUID routeId) {
    this.routeId = routeId;
  }


  /**
   * Return true if this MatchedPath object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchedPath matchedPath = (MatchedPath) o;
    return Objects.equals(this.distance, matchedPath.distance) &&
        Objects.equals(this.startTrackPositionIndex, matchedPath.startTrackPositionIndex) &&
        Objects.equals(this.endTrackPositionIndex, matchedPath.endTrackPositionIndex) &&
        Objects.equals(this.routeId, matchedPath.routeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, startTrackPositionIndex, endTrackPositionIndex, routeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchedPath {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    startTrackPositionIndex: ").append(toIndentedString(startTrackPositionIndex)).append("\n");
    sb.append("    endTrackPositionIndex: ").append(toIndentedString(endTrackPositionIndex)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

