/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CausingError
 */
export interface CausingError {
    /**
     * A human readable message that describes the error.
     * @type {string}
     * @memberof CausingError
     */
    description: string;
    /**
     * A constant string that can be used to identify this error class programmatically. An errorCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified. 
     * 
     * Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  
     * 
     * **Error codes for** `GENERAL_VALIDATION_ERROR`
     * * `GENERAL_INVALID_VALUE` - A parameter is set to an invalid value.  
     *   * `value` - The invalid value.  
     * * `GENERAL_UNRECOGNIZED_PARAMETER` - A parameter is unknown.  
     * * `GENERAL_DUPLICATE_PARAMETER` - A parameter is duplicated.  
     * * `GENERAL_MINIMUM_VALUE_VIOLATED` - The minimum value restriction is violated.  
     *   * `minimumValue` - The minimum value (integer or double).  
     * * `GENERAL_MAXIMUM_VALUE_VIOLATED` - The maximum value restriction is violated.  
     *   * `maximumValue` - The maximum value (integer or double).  
     * * `MAP_MATCH_QUOTA_EXCEEDED` - A product-specific restriction count is violated.  
     *   * `maximumLength` - Maximum number of input positions.  
     * * `MAP_MATCH_TIMESTAMPS_ALL_OR_NONE_VIOLATED` - Either all or none of the timestamps must be set.  
     *   * `numberOfDefinedTimestamps` - Total number of input positions with timestamp.  
     *   * `numberOfUndefinedTimestamps` - Total number of input positions without timestamp.  
     * * `MAP_MATCH_TIMESTAMPS_ASCENDING_VIOLATED` - Timestamps are not ascending.  
     *   * `numberOfNotAscendingTimestamps` - Total number of not ascending timestamps.  
     *   * `indexOfFirstViolatedTimestamp` - Index of the first not ascending timestamp.  
     *   * `timestamp` - Value of the first not ascending timestamp.  
     *   * `previousTimestamp` - Value of the timestamp before the first not ascending one.
     * @type {string}
     * @memberof CausingError
     */
    errorCode: string;
    /**
     * The name of the affected query or path parameter or a JSONPath to the affected property of the request.
     * @type {string}
     * @memberof CausingError
     */
    parameter?: string;
    /**
     * Additional properties specific to this error class.
     * @type {{ [key: string]: any; }}
     * @memberof CausingError
     */
    details?: { [key: string]: any; };
}

/**
 * Check if a given object implements the CausingError interface.
 */
export function instanceOfCausingError(value: object): value is CausingError {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('errorCode' in value) || value['errorCode'] === undefined) return false;
    return true;
}

export function CausingErrorFromJSON(json: any): CausingError {
    return CausingErrorFromJSONTyped(json, false);
}

export function CausingErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): CausingError {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'errorCode': json['errorCode'],
        'parameter': json['parameter'] == null ? undefined : json['parameter'],
        'details': json['details'] == null ? undefined : json['details'],
    };
}

export function CausingErrorToJSON(value?: CausingError | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': value['description'],
        'errorCode': value['errorCode'],
        'parameter': value['parameter'],
        'details': value['details'],
    };
}

