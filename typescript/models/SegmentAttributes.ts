/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes the attributes of a segment. Not all attributes are available for all segments.
 * @export
 * @interface SegmentAttributes
 */
export interface SegmentAttributes {
    /**
     * Indicates that the segment is part of a bridge.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    bridge?: boolean | null;
    /**
     * Indicates that the segment is part of a tunnel.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    tunnel?: boolean | null;
    /**
     * Indicates that the segment is part of a ramp.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    ramp?: boolean | null;
    /**
     * Indicates that the segment is part of a frontage road.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    frontage?: boolean | null;
    /**
     * Indicates that the segment is part of a road with a solid surface (made of concrete, asphalt, cobblestone etc.).
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    paved?: boolean | null;
    /**
     * Indicates that the segment is part of a road which is only suitable for vehicles with four-wheel drive.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    requiresFourWheelDrive?: boolean | null;
    /**
     * Indicates that the segment is part of a road which is privately held or maintained.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    privatelyManaged?: boolean | null;
    /**
     * Indicates that the segment is part of a road which is publicly accessible.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    publicAccess?: boolean | null;
    /**
     * Indicates that the segment is part of a parking lot.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    parkingLot?: boolean | null;
    /**
     * Indicates that the segment is part of a road where all traffic has priority over the traffic on the incoming roads.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    priorityRoad?: boolean | null;
    /**
     * Indicates that the segment is part of a road inside the built up area of a city.
     * @type {boolean}
     * @memberof SegmentAttributes
     */
    builtUpArea?: boolean | null;
    /**
     * The legal speed limit on the road to which this segment belongs [km/h]. Speed limits sometimes depend on the driving direction. If there is no direction specified by the heading parameter of the request then the smaller speed value of the two possible directions is provided.
     * @type {number}
     * @memberof SegmentAttributes
     */
    speedLimit?: number | null;
}

export function SegmentAttributesFromJSON(json: any): SegmentAttributes {
    return SegmentAttributesFromJSONTyped(json, false);
}

export function SegmentAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SegmentAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bridge': !exists(json, 'bridge') ? undefined : json['bridge'],
        'tunnel': !exists(json, 'tunnel') ? undefined : json['tunnel'],
        'ramp': !exists(json, 'ramp') ? undefined : json['ramp'],
        'frontage': !exists(json, 'frontage') ? undefined : json['frontage'],
        'paved': !exists(json, 'paved') ? undefined : json['paved'],
        'requiresFourWheelDrive': !exists(json, 'requiresFourWheelDrive') ? undefined : json['requiresFourWheelDrive'],
        'privatelyManaged': !exists(json, 'privatelyManaged') ? undefined : json['privatelyManaged'],
        'publicAccess': !exists(json, 'publicAccess') ? undefined : json['publicAccess'],
        'parkingLot': !exists(json, 'parkingLot') ? undefined : json['parkingLot'],
        'priorityRoad': !exists(json, 'priorityRoad') ? undefined : json['priorityRoad'],
        'builtUpArea': !exists(json, 'builtUpArea') ? undefined : json['builtUpArea'],
        'speedLimit': !exists(json, 'speedLimit') ? undefined : json['speedLimit'],
    };
}

export function SegmentAttributesToJSON(value?: SegmentAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bridge': value.bridge,
        'tunnel': value.tunnel,
        'ramp': value.ramp,
        'frontage': value.frontage,
        'paved': value.paved,
        'requiresFourWheelDrive': value.requiresFourWheelDrive,
        'privatelyManaged': value.privatelyManaged,
        'publicAccess': value.publicAccess,
        'parkingLot': value.parkingLot,
        'priorityRoad': value.priorityRoad,
        'builtUpArea': value.builtUpArea,
        'speedLimit': value.speedLimit,
    };
}

