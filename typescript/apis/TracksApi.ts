/* tslint:disable */
/* eslint-disable */
/**
 * Map Matching
 * With the Map Matching service you can assign GPS positions to road segments on a digital map.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CalculationMode,
    CalculationModeFromJSON,
    CalculationModeToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MatchedTrackIdentifier,
    MatchedTrackIdentifierFromJSON,
    MatchedTrackIdentifierToJSON,
    MatchedTrackResultType,
    MatchedTrackResultTypeFromJSON,
    MatchedTrackResultTypeToJSON,
    MatchingResponse,
    MatchingResponseFromJSON,
    MatchingResponseToJSON,
    Track,
    TrackFromJSON,
    TrackToJSON,
} from '../models';

export interface CreateMatchedTrackRequest {
    track: Track;
    calculationMode?: CalculationMode;
}

export interface DeleteMatchedTrackRequest {
    id: string;
}

export interface GetMatchedTrackRequest {
    id: string;
    results?: Array<MatchedTrackResultType>;
}

/**
 * 
 */
export class TracksApi extends runtime.BaseAPI {

    /**
     * Creates a complete track by triggering a matching calculation for it.
     */
    async createMatchedTrackRaw(requestParameters: CreateMatchedTrackRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MatchedTrackIdentifier>> {
        if (requestParameters.track === null || requestParameters.track === undefined) {
            throw new runtime.RequiredError('track','Required parameter requestParameters.track was null or undefined when calling createMatchedTrack.');
        }

        const queryParameters: any = {};

        if (requestParameters.calculationMode !== undefined) {
            queryParameters['calculationMode'] = requestParameters.calculationMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tracks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackToJSON(requestParameters.track),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchedTrackIdentifierFromJSON(jsonValue));
    }

    /**
     * Creates a complete track by triggering a matching calculation for it.
     */
    async createMatchedTrack(requestParameters: CreateMatchedTrackRequest, initOverrides?: RequestInit): Promise<MatchedTrackIdentifier> {
        const response = await this.createMatchedTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a matched track specified by its ID.
     */
    async deleteMatchedTrackRaw(requestParameters: DeleteMatchedTrackRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMatchedTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a matched track specified by its ID.
     */
    async deleteMatchedTrack(requestParameters: DeleteMatchedTrackRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteMatchedTrackRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the results of a matching calculation specified by its ID.
     */
    async getMatchedTrackRaw(requestParameters: GetMatchedTrackRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MatchingResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMatchedTrack.');
        }

        const queryParameters: any = {};

        if (requestParameters.results) {
            queryParameters['results'] = requestParameters.results.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchingResponseFromJSON(jsonValue));
    }

    /**
     * Gets the results of a matching calculation specified by its ID.
     */
    async getMatchedTrack(requestParameters: GetMatchedTrackRequest, initOverrides?: RequestInit): Promise<MatchingResponse> {
        const response = await this.getMatchedTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
